function DT_HatApplyAcuityHowMuchToAdd()
    -- Apply Arcane Acuity stacks up to threshold
    local stringStatusName = 'MAG_GISH_ARCANE_ACUITY'
    local threshold = 5
    local diff = threshold - GetStatusDuration(stringStatusName, context.Source)
    if diff <= 0 then
        return 0  -- we already have 5+ stacks
    end
    return math.min(diff, 2)  -- add up to 2 stacks
end


-- check entity uses not two-handed and not versatile weapon in both hands
function DT_AbnormalObstinacyWeaponCondition(entity)
    return ~FightingStyle_GreatWeapon(entity)
end

function OffhandExtraAttackCheck()
    return HasStringInSpellRoll('WeaponAttack') & HasUseCosts('BonusActionPoint', false)
end

function IsMeleeOffHandAttack()
    result = context.HitDescription.AttackType == AttackType.MeleeOffHandWeaponAttack
    return ConditionResult(result)
end

function DuelistMageCantripCheck()
    return IsCantrip() & HasUseCosts('ActionPoint') & HasSpellFlag(SpellFlags.Spell) & ~SpellId('Projectile_EldritchBlast')
end

function DT_DuelistMageWeaponCondition(entity)
    return FightingStyle_Dueling(entity) & ~HasShieldEquipped(entity)
end

function IsMainHandRangedWeaponAttack()
    entity = context.Source
    return HasUseCosts('ActionPoint', false) & HasStringInSpellRoll('RangedWeaponAttack') & WieldingWeapon('Ammunition', false, true, entity) & WieldingWeapon('Twohanded', false, true, entity)
end


-- Check level within bounds, including
function CreatureLevelBetween(valueFrom, valueTo, entity)
    entity = entity or context.Source
    return ConditionResult(entity.Level >= valueFrom) & ConditionResult(entity.Level <= valueTo)
end

function DT_IsSurroundedByTwoOrMoreEnemies(target, source)
    local distance = 3
    local NumberOfEnemy = 2
    local exclusionStatus = "SG_Incapacitated"

    local enemies = GetEnemiesWithinRange(distance, target, source)

    -- return false if not enough enemies around
    if enemies == nil or #enemies.Enemies < NumberOfEnemy then
        return ConditionResult(false)
    end

    local enemiesWithoutExclusionStatus = 0

    -- ensure enemy does not have the excluded status
    for _, enemy in ipairs(enemies.Enemies) do
        noExcludedStatus = ~HasStatus(exclusionStatus, enemy)

        if noExcludedStatus.Result then
            enemiesWithoutExclusionStatus = enemiesWithoutExclusionStatus + 1
        end
    end

    return ConditionResult(enemiesWithoutExclusionStatus >= NumberOfEnemy)
end