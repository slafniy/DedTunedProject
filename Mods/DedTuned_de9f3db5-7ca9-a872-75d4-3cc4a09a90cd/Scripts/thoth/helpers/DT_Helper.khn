-- check entity uses not two-handed and not versatile weapon in both hands
function DT_AbnormalObstinacyWeaponCondition(entity)
    return ~FightingStyle_GreatWeapon(entity)
end

function OffhandExtraAttackCheck()
    return HasStringInSpellRoll('WeaponAttack') & HasUseCosts('BonusActionPoint', false)
end

function IsMeleeOffHandAttack()
    result = context.HitDescription.AttackType == AttackType.MeleeOffHandWeaponAttack
    return ConditionResult(result)
end

function DuelistMageCantripCheck()
    return IsCantrip() & HasUseCosts('ActionPoint') & HasSpellFlag(SpellFlags.Spell) & ~SpellId('Projectile_EldritchBlast')
end

function DT_DuelistMageWeaponCondition(entity)
    return FightingStyle_Dueling(entity) & ~HasShieldEquipped(entity)
end

function DT_IsSharpshooterSpell()
    local entity = context.Source
    local weapon = GetItemInEquipmentSlot(EquipmentSlot.RangedMainHand, entity)

    local result = weapon.IsValid
            & HasWeaponProperty(WeaponProperties.Ammunition, weapon)
            & HasWeaponProperty(WeaponProperties.Twohanded, weapon)
            & IsProficientWith(entity, weapon)
            & HasStringInSpellRoll('RangedWeaponAttack')

    return ConditionResult(result.Result, { ConditionError("DT_SharpshooterBlocked") })
end


-- Check level within bounds, including
function CreatureLevelBetween(valueFrom, valueTo, entity)
    entity = entity or context.Source
    return ConditionResult(entity.Level >= valueFrom) & ConditionResult(entity.Level <= valueTo)
end

function DT_IsSurroundedByTwoOrMoreEnemies(target, source)
    local distance = 3
    local NumberOfEnemy = 2
    local exclusionStatus = "SG_Incapacitated"

    local enemies = GetEnemiesWithinRange(distance, target, source)

    -- return false if not enough enemies around
    if enemies == nil or #enemies.Enemies < NumberOfEnemy then
        return ConditionResult(false)
    end

    local enemiesWithoutExclusionStatus = 0

    -- ensure enemy does not have the excluded status
    for _, enemy in ipairs(enemies.Enemies) do
        noExcludedStatus = ~HasStatus(exclusionStatus, enemy)

        if noExcludedStatus.Result then
            enemiesWithoutExclusionStatus = enemiesWithoutExclusionStatus + 1
        end
    end

    return ConditionResult(enemiesWithoutExclusionStatus >= NumberOfEnemy)
end

function DT_ArcaneAcuityHowMuchToAdd(desiredAddAmount, maxAmount)
    -- return max Arcane Acuity stacks we can add not overflowing threshold
    local stringStatusName = 'MAG_GISH_ARCANE_ACUITY'

    local maxAvailableStacksToAdd = maxAmount - GetStatusDuration(stringStatusName, context.Source)

    if maxAvailableStacksToAdd <= 0 then
        -- we cannot add anything because we're above threshold
        return 0
    end

    local diff = maxAvailableStacksToAdd - desiredAddAmount

    -- we can add full amount
    if diff >= 0 then
        return desiredAddAmount
    end

    -- we can only add this amount
    return maxAvailableStacksToAdd
end

function DT_IsNotPartiallyRested()
    local hasPartiRestedStatus = HasStatus('DT_PARTIAL_RESTED', context.Source)
    return ConditionResult((~hasPartiRestedStatus).Result, { ConditionError("DT_PartiallyRested") })
end

function ReligionCheck(DC)
    local skillCheck = SkillCheck(Skill.Religion, DC)
    return ConditionResult(skillCheck.Result, {}, {}, skillCheck.Chance)
end

function MagicWeaponTargetConditions()
    local target = context.Target

    if Character(context.Target) then
        target = GetActiveWeapon(target, true)  -- second arg is "isMainHand"
    end

    -- WeaponProperties.Magical exists, but it's not what I need
    local isWeapon = IsWeapon(target)

    return isWeapon
end

-- added YSRSLIDFWWADNIWHWIHLY_YWNK to fix missing ranged attacks
-- (I don't know what this status mean)
function StatusDoesNotInvokeOnStatusApply()
    return StatusId('PERFORM_POSITIVE_DOS2_1')
            | StatusId('PERFORM_POSITIVE_DOS2_2')
            | StatusId('PERFORM_POSITIVE_DOS2_3')
            | StatusId('DOS2_JOIN_1')
            | StatusId('DOS2_JOIN_2')
            | StatusId('DOS2_JOIN_3')
            | StatusId('PERFORM_POSITIVE')
            | StatusId('PERFORM_POSITIVE_THEPOWER')
            | StatusId('PERFORM_POSITIVE_STARGAZING')
            | StatusId('PERFORM_POSITIVE_BARDDANCE')
            | StatusId('PERFORM_NEGATIVE')
            | StatusId('DASH')
            | StatusId('DASH_STACKED')
            | StatusId('DASH_STACKED_2')
            | StatusId('SNEAKING')
            | StatusId('SNEAKING_CLEAR')
            | StatusId('SNEAKING_LIGHTLY_OBSCURED')
            | StatusId('SNEAKING_HEAVILY_OBSCURED')
            | StatusId('DISENGAGE')
            | StatusId('NON_LETHAL')
            | StatusId('MONK_SOUND_SWITCH')
            | StatusId('FLANKED')
            | StatusId('MAG_FROST_DURATION_TECHNICAL')
            | StatusId('MAG_FROST_FROZEN_CHECK_TECHNICAL')
            | StatusId('MAG_RADIANT_RADIATING_ORB_DURATION_TECHNICAL')
            | StatusId('MAG_ZOC_FORCE_CONDUIT_DURATION_TECHNICAL')
            | StatusId('MAG_FIRE_HEAT_DURATION_TECHNICAL')
            | StatusId('MAG_THUNDER_REVERBERATION_DURATION_TECHNICAL')
            | StatusId('MAG_PSYCHIC_MENTAL_FATIGUE_DURATION_TECHNICAL')
            | StatusId('MAG_VIOLENCE_DURATION_TECHNICAL')
            | StatusId('MAG_MOMENTUM_DURATION_TECHNICAL')
            | StatusId('MAG_CHARGED_LIGHTNING_DURATION_TECHNICAL')
            | StatusId('MAG_ATTACK_DEBUFF_DURATION_TECHNICAL')
            | StatusId('MAG_FORCE_SHIELD_WARD_TECHNICAL')
            | StatusId('MAG_GISH_ARCANE_ACUITY_DURATION_TECHNICAL')
            | StatusId('PASSIVE_AGONIZING_BLAST')
            | StatusId('PASSIVE_ARMOR_OF_AGATHYS')
            | StatusId('PASSIVE_ARMOR_OF_AGATHYS_ATTACKER')
            | StatusId('PASSIVE_BANE')
            | StatusId('PASSIVE_BLESS')
            | StatusId('PASSIVE_DARK_ONES_BLESSING')
            | StatusId('PASSIVE_DEFENSIVE_DUELIST')
            | StatusId('PASSIVE_DISCIPLE_OF_LIFE')
            | StatusId('PASSIVE_FIGHTING_STYLE_PROTECTION')
            | StatusId('PASSIVE_HEX')
            | StatusId('PASSIVE_HUNTERS_MARK')
            | StatusId('PASSIVE_REPELLING_BLAST')
            | StatusId('PASSIVE_STAGE_FRIGHT')
            | StatusId('PASSIVE_TRUE_STRIKE')
            | StatusId('PASSIVE_WARDING_FLARE')
            | StatusId('PASSIVE_STEADY_ATTACK')
            | StatusId('PASSIVE_FULL_SWING_ATTACK')
            | StatusId('PASSIVE_GAPING_WOUND_ATTACK')
            | StatusId('PASSIVE_OVERWHELM_ATTACK')
            | StatusId('INTERRUPT_SMITE_DIVINE_VFX')
            | StatusId('INTERRUPT_BARDIC_INSPIRATION_ATTACK')
            | StatusId('INTERRUPT_BARDIC_INSPIRATION_SAVINGTHROW')
            | StatusId('INTERRUPT_BARDIC_INSPIRATION_COMBAT_ATTACK')
            | StatusId('INTERRUPT_BARDIC_INSPIRATION_COMBAT_DEFENSE')
            | StatusId('INTERRUPT_BARDIC_INSPIRATION_COMBAT_DAMAGE')
            | StatusId('INTERRUPT_CUTTING_WORDS')
            | StatusId('INTERRUPT_CUTTING_WORDS_TARGET')
            | StatusId('INTERRUPT_DEFENSIVE_DUELIST')
            | StatusId('INTERRUPT_GIANTKILLER')
            | StatusId('INTERRUPT_RIPOSTE')
            | StatusId('YSRSLIDFWWADNIWHWIHLY_YWNK')
end