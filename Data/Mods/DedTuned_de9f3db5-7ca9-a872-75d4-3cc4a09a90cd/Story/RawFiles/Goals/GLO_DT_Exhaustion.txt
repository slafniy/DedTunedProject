Version 1
SubGoalCombiner SGC_AND
INITSECTION
DB_DT_Exhaustion_RemoveStacksOnShortRest(10);

DB_DT_Exhaustion_Stage(15, "DT_EXHAUSTION_DEBUFF_LIGHT");
DB_DT_Exhaustion_Stage(25, "DT_EXHAUSTION_DEBUFF_UNCONTROLLABLE_SLEEP");
DB_DT_Exhaustion_Stage(40, "EXHAUSTION_DEBUFF_DEATH");

NOT DB_DT_ExhaustionShortRestCount(NULL_00000000-0000-0000-0000-000000000000, 0);
KBSECTION
//REGION // Apply +1 Exhaustion stack on new turn in combat 
IF
TurnStarted((CHARACTER)_Character)  // works in combat
AND
DB_PartyMembers(_Character)
THEN
ApplyStatus(_Character, "DT_EXHAUSTION_STACKS", 6.0, 1, _Character);  // 6 sec is 1 turn/stack, duration is freezed
//END_REGION


//REGION  // count short rests
IF
ShortRested(_Character)
AND
DB_DT_ExhaustionShortRestCount(_Character, _Count)
AND
IntegerSum(_Count, 1, _CountNew)
THEN
NOT DB_DT_ExhaustionShortRestCount(_Character, _Count);
DB_DT_ExhaustionShortRestCount(_Character, _CountNew);

IF
ShortRested(_Character)
AND
NOT DB_DT_ExhaustionShortRestCount(_Character, _)
THEN
DB_DT_ExhaustionShortRestCount(_Character, 1);

IF
LongRestFinished()
AND
DB_DT_ExhaustionShortRestCount(_Character, _Count)
THEN
NOT DB_DT_ExhaustionShortRestCount(_Character, _Count);
//END_REGION


//REGION // On short rest remove some stacks
IF
ShortRested(_Character)
AND
DB_DT_ExhaustionShortRestCount(_Character, _ShortRestCount)
AND
_ShortRestCount <= 2
AND
GetStatusTurns(_Character, "DT_EXHAUSTION_STACKS", _Stacks)
AND
DB_DT_Exhaustion_RemoveStacksOnShortRest(_StacksToRemoveOnShortRestConst)
AND
IntegerSubtract(_Stacks, _StacksToRemoveOnShortRestConst, _DesiredStacks)
AND
IntegerMax(_DesiredStacks, 0, _DesiredStacksMax)  // to avoid negative Exhaustion duration
AND
IntegerSubtract(_Stacks, _DesiredStacksMax, _StacksToRemove)
AND
IntegerToReal(_StacksToRemove, _StacksToRemoveReal)
AND
RealProduct(_StacksToRemoveReal, -6.0, _DurationToApplySec)  // get negative duration in seconds to apply to status
THEN
ApplyStatus(_Character, "DT_EXHAUSTION_STACKS", _DurationToApplySec, 1, _Character);
//END_REGION


//REGION  // clear Exhaustion stacks on first WLD_Main_A load
IF
LevelLoaded("WLD_Main_A")
AND
NOT DB_LevelLoadedOnce("WLD_Main_A")
AND
DB_Origins(_Origin)
AND
DB_DT_Exhaustion_Stage(_, _Status)
THEN
RemoveStatus(_Origin, "DT_EXHAUSTION_STACKS", NULL_00000000-0000-0000-0000-000000000000);
RemoveStatus(_Origin, _Status, NULL_00000000-0000-0000-0000-000000000000);

IF
LevelLoaded("WLD_Main_A")
AND
NOT DB_LevelLoadedOnce("WLD_Main_A")
AND
DB_PartyMembers(_Character)
AND
DB_DT_Exhaustion_Stage(_, _Status)
THEN
RemoveStatus(_Character, "DT_EXHAUSTION_STACKS", NULL_00000000-0000-0000-0000-000000000000);
RemoveStatus(_Character, _Status, NULL_00000000-0000-0000-0000-000000000000);
//END_REGION


//REGION // Apply/Remove debuffs on particular events
IF
StatusApplied((CHARACTER)_Character, "DT_EXHAUSTION_STACKS", _, _)
AND
GetStatusTurns(_Character, "DT_EXHAUSTION_STACKS", _Stacks)
THEN
PROC_DT_ExhaustionRefreshDebuffs(_Character, _Stacks);

IF
Resurrected(_Character)
AND
GetStatusTurns(_Character, "DT_EXHAUSTION_STACKS", _Stacks)
AND
DB_DT_Exhaustion_Stage(_DeathStacks, "EXHAUSTION_DEBUFF_DEATH")
AND
_Stacks >= _DeathStacks
THEN
ApplyStatus(_Character, "DT_EXHAUSTION_STACKS", -18.0, 1, _Character);  // -3 stacks to give a chance
//END_REGION


//REGION // PROC_DT_ExhaustionRefreshDebuffs
PROC
PROC_DT_ExhaustionRefreshDebuffs((CHARACTER)_Character, (INTEGER)_Stacks)
AND
DB_DT_Exhaustion_Stage(_Breakpoint, _Debuff)
AND
_Stacks >= _Breakpoint
AND
HasAppliedStatus(_Character, _Debuff, 0)
THEN
ApplyStatus(_Character, _Debuff, -1.0, 1, _Character);

PROC
PROC_DT_ExhaustionRefreshDebuffs((CHARACTER)_Character, (INTEGER)_Stacks)
AND
DB_DT_Exhaustion_Stage(_Breakpoint, _Debuff)
AND
_Stacks < _Breakpoint
AND
HasAppliedStatus(_Character, _Debuff, 1)
THEN
RemoveStatus(_Character, _Debuff, _Character);
//END_REGION


//REGION  // handle StatusApplied DT_EXHAUSTION_DEBUFF_UNCONTROLLABLE_SLEEP_TECHNICAL and call PROC_DT_ExhaustionRefreshSleeping
IF
StatusApplied((CHARACTER)_Character, "DT_EXHAUSTION_DEBUFF_UNCONTROLLABLE_SLEEP_TECHNICAL", _, _)
AND
HasAppliedStatus(_Character, "DT_EXHAUSTION_DEBUFF_UNCONTROLLABLE_SLEEP", 1)
THEN
PROC_DT_ExhaustionRefreshSleeping(_Character);
//END_REGION


//REGION  // PROC_DT_ExhaustionRefreshSleeping
PROC
PROC_DT_ExhaustionRefreshSleeping((CHARACTER)_Character)
AND
HasAppliedStatus(_Character, "SLEEPING", 0)
AND
HasAppliedStatus(_Character, "EXHAUSTION_DEBUFF_UNCONTROLLABLE_SLEEP_RESISTANCE", 0)
THEN
// DC 15
RequestPassiveRoll(_Character, _Character, "SavingThrow", "Constitution", (DIFFICULTYCLASS)Act1_Hard_831e1fbe-428d-4f4d-bd17-4206d6efea35, 0, "DT_ExhaustionSleepSavingRoll");

IF
RollResult("DT_ExhaustionSleepSavingRoll", _Character, _, _Result, _, _)
AND
_Result != 1
THEN
ApplyStatus(_Character, "SLEEPING", 12.0, 1, _Character);

IF
RollResult("DT_ExhaustionSleepSavingRoll", _Character, _, _Result, _, _)
AND
_Result == 1
THEN
ApplyStatus(_Character, "EXHAUSTION_DEBUFF_UNCONTROLLABLE_SLEEP_RESISTANCE", 12.0, 1, _Character);
//END_REGION

EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__Start"
