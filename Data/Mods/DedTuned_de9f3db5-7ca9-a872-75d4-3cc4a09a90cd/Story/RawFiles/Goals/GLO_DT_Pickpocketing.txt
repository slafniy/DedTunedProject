Version 1
SubGoalCombiner SGC_AND
INITSECTION
// Store info about pickpockets this day, (CHARACTER)_Victim, (INTEGER)_TheftCount, (INTEGER)_Gold
NOT DB_DT_Pickpocketing_StolenCounter((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, 0, 0);

// Character - Victim
NOT DB_DT_Pickpocketing_DefuffsTracker((CHARACTER)NULL_00000000-0000-0000-0000-000000000000, (CHARACTER)NULL_00000000-0000-0000-0000-000000000000);
KBSECTION
IF
TextEvent("dtdist")
AND
DB_PartyMembers(_Character)
AND
DB_DT_Pickpocketing_StolenCounter(_Victim, _, _)
AND
_Character != _Victim
AND
GetDistanceTo(_Character, _Victim, _Distance)
THEN
PROC_DT_PickpocketingHandleDistance(_Character, _Victim, _Distance);


//REGION  // PROC_DT_PickpocketingHandleDistance
PROC
PROC_DT_PickpocketingHandleDistance((CHARACTER)_Character, (CHARACTER)_Victim, (REAL)_Distance)
AND
_Distance < 3.0
AND
NOT DB_DT_Pickpocketing_DefuffsTracker(_Character, _Victim)
THEN
DebugText(_Victim, "thief is near, apply debuff!");
PROC_DT_Pickpocketing_AddDebuff(_Character, _Victim);

PROC
PROC_DT_PickpocketingHandleDistance((CHARACTER)_Character, (CHARACTER)_Victim, (REAL)_Distance)
AND
_Distance > 3.1
AND
DB_DT_Pickpocketing_DefuffsTracker(_Character, _Victim)
THEN
DebugText(_Victim, "thief is gone, remove debuff!");
PROC_DT_Pickpocketing_RemoveDebuff(_Character, _Victim);
//END_REGION



/*//REGION // Handle Pickpocket Started - apply aura to make range checks with it
IF
RequestPickpocket(_Thief, _Victim)
AND
DB_PartyMembers(_Thief)  // not sure if this triggers for non-party thieves somewhere
THEN
ApplyStatus(_Victim, "DT_PICKPOCKETING_VICTIM_AURA", -1.0, 1, _Victim);
//END_REGION*/

/*//REGION // Handle status DT_PICKPOCKETING_VICTIM_IS_NEAR - store who is responsible for this status
IF
StatusApplied((CHARACTER)_Thief, "DT_PICKPOCKETING_VICTIM_IS_NEAR", (CHARACTER)_Victim, _StoryActionID)
AND
DB_PartyMembers(_Thief)
AND
ConcatenateInteger("DT_PICKPOCKETING_VICTIM_IS_NEAR applied with ID: ", _StoryActionID, _msg)
THEN
DB_DT_Pickpocketing_VictimNear_StoryActionID(_Victim, _Thief, _StoryActionID);
DebugText(_Thief, _msg);

IF
StatusRemoved((CHARACTER)_Thief, "DT_PICKPOCKETING_VICTIM_IS_NEAR", _, _StoryActionID)
AND
DB_DT_Pickpocketing_VictimNear_StoryActionID(_Victim, _Thief, _StoryActionID)
THEN
NOT DB_DT_Pickpocketing_VictimNear_StoryActionID(_Victim, _Thief, _StoryActionID);
//END_REGION*/


/*//REGION // Handle status DT_PICKPOCKETING_VICTIM_IS_NEAR - apply/remove SleightOfHand debuff if needed
IF
DB_PartyMembers(_Thief)
AND
HasAppliedStatus(_Thief, "DT_PICKPOCKETING_VICTIM_IS_NEAR", 1)
AND
DB_DT_Pickpocketing_VictimNear_StoryActionID(_Victim, _StoryActionID)
AND
DB_DT_Pickpocketing_StolenCounter(_Victim, _NumberOfItems, _)
AND
NOT DB_DT_Pickpocketing_VictimToThiefMap(_Victim, _Thief)
AND
ConcatenateInteger("DT_Pickpocketing_ActionID_", _StoryActionID, _BoostID)
THEN
PROC_DT_Pickpocketing_AddDebuff(_Thief, _Victim, _BoostID);


IF
DB_PartyMembers(_Thief)
AND
HasAppliedStatus(_Thief, "DT_PICKPOCKETING_VICTIM_IS_NEAR", 0)
AND
DB_DT_Pickpocketing_VictimNear_StoryActionID(_Victim, _StoryActionID)
AND
ConcatenateInteger("DT_Pickpocketing_ActionID_", _StoryActionID, _BoostID)
THEN
PROC_DT_Pickpocketing_RemoveDebuff(_Thief, _Victim, _BoostID);

IF
DB_PartyMembers(_Thief)
AND
HasAppliedStatus(_Thief, "DT_PICKPOCKETING_VICTIM_IS_NEAR", 1)
AND
NOT DB_DT_Pickpocketing_VictimToThiefMap(_, _Thief)
AND
DB_DT_Pickpocketing_VictimNear_StoryActionID(_Victim, _StoryActionID)
AND
ConcatenateInteger("DT_Pickpocketing_ActionID_", _StoryActionID, _BoostID)
THEN
PROC_DT_Pickpocketing_RemoveDebuff(_Thief, _Victim, _BoostID);
//END_REGION*/


//REGION
PROC
PROC_DT_Pickpocketing_AddDebuff((CHARACTER)_Character, (CHARACTER)_Victim)
THEN
DB_DT_Pickpocketing_DefuffsTracker(_Character, _Victim);

PROC
PROC_DT_Pickpocketing_AddDebuff((CHARACTER)_Character, (CHARACTER)_Victim)
THEN
ApplyStatus(_Character, "DT_PICKPOCKETING_SLEIGHT_OF_HAND_DEBUFF_MINUS_ONE", -1.0, 1, _Victim);
//AddBoosts(_Thief, "Skill(SleightOfHand, -10)", _BoostID, _Victim);
//END_REGION


//REGION
PROC
PROC_DT_Pickpocketing_RemoveDebuff((CHARACTER)_Character, (CHARACTER)_Victim)
AND
HasAppliedStatus(_Character, "DT_PICKPOCKETING_SLEIGHT_OF_HAND_DEBUFF_MINUS_ONE", 1)
THEN
RemoveStatus(_Character, "DT_PICKPOCKETING_SLEIGHT_OF_HAND_DEBUFF_MINUS_ONE", _Victim);
//RemoveBoosts(_Thief, "Skill(SleightOfHand, -10)", 1, _BoostID, _Victim);

PROC
PROC_DT_Pickpocketing_RemoveDebuff((CHARACTER)_Character, (CHARACTER)_Victim)
THEN
NOT DB_DT_Pickpocketing_DefuffsTracker(_Character, _Victim);
//END_REGION


//REGION // Handle Pickpocket Success
IF
CharacterPickpocketSuccess(_Thief, _Victim, _, _, _, _Gold)
AND
DB_PartyMembers(_Thief)  // not sure if this triggers for non-party thieves somewhere
THEN
PROC_DT_Pickpocketing_SuccessHandler(_Victim, _Gold);
//END_REGION


//REGION // PROC_DT_Pickpocketing_SuccessHandler 
PROC
PROC_DT_Pickpocketing_SuccessHandler((CHARACTER)_Victim, (INTEGER)_Gold)
AND
DB_DT_Pickpocketing_StolenCounter(_Victim, _TheftCountOld, _GoldOld)  // have record, increment counter
AND
IntegerSum(_TheftCountOld, 1, _TheftCountNew)
AND
IntegerSum(_GoldOld, _Gold, _GoldNew)
THEN
PROC_DT_Pickpocketing_StolenCounterReplace(_Victim, _TheftCountNew, _GoldNew);

PROC
PROC_DT_Pickpocketing_SuccessHandler((CHARACTER)_Victim, (INTEGER)_Gold)
AND
NOT DB_DT_Pickpocketing_StolenCounter(_Victim, _, _)  // have no records yet, add
THEN
DB_DT_Pickpocketing_StolenCounter(_Victim, 1, _Gold);
//END_REGION


//REGION  // replace values in db
PROC
PROC_DT_Pickpocketing_StolenCounterReplace((CHARACTER)_Victim, (INTEGER)_TheftCountNew, (INTEGER)_GoldNew)
AND
DB_DT_Pickpocketing_StolenCounter(_Victim, _TheftCountOld, _GoldOld)
THEN
NOT DB_DT_Pickpocketing_StolenCounter(_Victim, _TheftCountOld, _GoldOld);  // remove old

PROC
PROC_DT_Pickpocketing_StolenCounterReplace((CHARACTER)_Victim, (INTEGER)_TheftCountNew, (INTEGER)_GoldNew)
THEN
DB_DT_Pickpocketing_StolenCounter(_Victim, _TheftCountNew, _GoldNew);  // add new


// only for debugging, works on 2nd+ theft
PROC
PROC_DT_Pickpocketing_StolenCounterReplace((CHARACTER)_Victim, (INTEGER)_TheftCountNew, (INTEGER)_GoldNew)
AND
ConcatenateInteger("Stolen: ", _TheftCountNew, _msg1)
AND
Concatenate(_msg1, ", Gold: ", _msg2)
AND
ConcatenateInteger(_msg2, _GoldNew, _msg)
THEN
DebugText(_Victim, _msg);
//END_REGION


/*IF
TextEvent("dtdist")
AND
DB_PartyMembers(_Character)
AND
DB_PartyMembers(_Other)
AND
GUIDToString(_Character, _CharacterStr)
AND
GUIDToString(_Other, _OtherStr)
AND
GetDistanceTo(_Character, _Other, _Distance)
AND
Concatenate("Distance to ", _OtherStr, _msg1)
AND
Concatenate(_msg1, ": ", _msg2)
AND
ConcatenateReal(_msg2, _Distance, _msg)
THEN
DebugText(_Character, _msg);*/
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__Start"
